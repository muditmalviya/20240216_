/**
 * @author Mudit
 * In this assignment an Express.js server is used to manage products and
 * orders through CRUD operations (Create, Read, Update, Delete) as (POST, GET, PUT, DELETE).
 *  It offers routes for searching, updating, and deleting products by ID, retrieving the status
 * of an order by its ID, creating new orders, and canceling existing ones. All interactions
 * are done through MongoDB for storing and retrieving product and order data.
 */





// Import required modules
const express = require('express'); // Import Express framework
const mongoose = require('mongoose'); // Import Mongoose ORM for MongoDB
// Import UUID library for generating unique IDs
const { v4: uuidv4 } = require('uuid'); 
const app = express(); // Create Express app instance
const PORT = process.env.PORT || 5000; // Define port number for the server

// Connect to MongoDB
mongoose.connect('mongodb+srv://mudit:12345@cluster0.x9cfgtk.mongodb.net/?retryWrites=true&w=majority', { useNewUrlParser: true, useUnifiedTopology: true });

const db = mongoose.connection; // MongoDB connection object

// Event handling for MongoDB connection errors and successful connection
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => console.log('Connected to MongoDB'));

// Define MongoDB schema for products
const productSchema = new mongoose.Schema({
    id: { type: Number, unique: true ,default: uuidv4 }, // Unique product ID
    description: String, // Description of the product
    price: Number, // Price of the product
    stock: Number, // Stock quantity of the product
    image: String, // URL of the product image
    _id: { type: String, default: uuidv4 } // Default autogenerated MongoDB ID
});

// Define MongoDB schema for orders
const orderSchema = new mongoose.Schema({
    order_id: Number, // Order ID
    customer_name: String, // Customer name
    products: [{ // Array of products in the order
        product_id: Number, // Product ID
        product_name: String, // Product name
        quantity: Number // Quantity of the product
    }],
    total_price: Number, // Total price of the order
    status: String // Status of the order
});

// Define models based on the schemas
const Product = mongoose.model('Product', productSchema); // Product model
const Order = mongoose.model('Order', orderSchema); // Order model

// Middleware to parse JSON bodies
app.use(express.json());

// API routes

// Define a route to get product details by ID
app.get('/products/:productId', async (req, res) => {
    try {
        // Extract product ID from the request
        const productId = req.params.productId; 
        // Find the product by ID in the database
        const product = await Product.findOne({ id: productId });
        // Check if the product exists
        if (!product) {
            return res.status(404).json({ error: 'Product not found' });
        }
        // Return the product details in the response
        res.json(product);
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Define a route to create a new product
app.post('/newproduct', async (req, res) => {
    try {
        const { id, name, description, price, stock, image } = req.body;
         // Extract product details from the request body
        // Create a new product instance
        const product = new Product({ id, name, description, price, stock, image });
        // Save the product to the database
        const savedProduct = await product.save();
        res.status(201).json(savedProduct); // Respond with the saved product
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Define a route to update product details
app.put('/updateproducts/:productId', async (req, res) => {
    try {
        // Extract product ID from the request
        const productId = req.params.productId; 
         // Extract fields to update from the request body
        const updateFields = req.body;
        // Find the product by ID and update its fields
        delete updateFields.id; // Remove the ID field from the update
        const updatedProduct = await Product.findOneAndUpdate({ id: productId }, updateFields, { new: true });
        if (!updatedProduct) {
            return res.status(404).json({ error: 'Product not found' });
        }
        res.json(updatedProduct); // Respond with the updated product
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Define a route to place an order
app.post('/orders', async (req, res) => {
    try {
        const { productId, quantity } = req.body;
         // Extract product ID and quantity from the request body
         // Create a new order instance
        const order = new Order({ productId, quantity }); 
        await order.save(); // Save the order to the database
        res.status(201).json(order); // Respond with the created order
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Define a route to delete a product
app.delete('/deleteproducts/:productId', async (req, res) => {
    try {
         // Extract product ID from the request
        const productId = req.params.productId;
        // Find and delete the product by ID
        const deletedProduct = await Product.findOneAndDelete({ id: productId });
        if (deletedProduct) {
            res.json({ message: 'Product deleted successfully', deletedProduct });
        } else {
            res.status(404).json({ error: 'Product not found' });
        }
    } catch (error) {
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Start the server
console.log('Starting server...');
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
